// <auto-generated />
using System;
using MedicalQueueApi.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MedicalQueueApi.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20230713212529_add_model_migration")]
    partial class add_model_migration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.19")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MedicalQueueApi.Models.Administrator", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("LastAuth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Administrators");
                });

            modelBuilder.Entity("MedicalQueueApi.Models.ColorScheme", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CssFileProperty")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ColorSchemes");
                });

            modelBuilder.Entity("MedicalQueueApi.Models.Display", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ColorSchemeId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ColorSchemeId");

                    b.ToTable("Displays");
                });

            modelBuilder.Entity("MedicalQueueApi.Models.Monitoring", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateTimeEvent")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DisplayId")
                        .HasColumnType("integer");

                    b.Property<bool>("TypeEvent")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("DisplayId");

                    b.ToTable("MonitoringData");
                });

            modelBuilder.Entity("MedicalQueueApi.Models.Page", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("DisplayId")
                        .HasColumnType("integer");

                    b.Property<int>("TimeDisplay")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TypePageId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DisplayId");

                    b.HasIndex("TypePageId");

                    b.ToTable("Pages");
                });

            modelBuilder.Entity("MedicalQueueApi.Models.TypePage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("TypePages");
                });

            modelBuilder.Entity("MedicalQueueApi.Models.Display", b =>
                {
                    b.HasOne("MedicalQueueApi.Models.ColorScheme", "ColorScheme")
                        .WithMany()
                        .HasForeignKey("ColorSchemeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ColorScheme");
                });

            modelBuilder.Entity("MedicalQueueApi.Models.Monitoring", b =>
                {
                    b.HasOne("MedicalQueueApi.Models.Display", "Display")
                        .WithMany()
                        .HasForeignKey("DisplayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Display");
                });

            modelBuilder.Entity("MedicalQueueApi.Models.Page", b =>
                {
                    b.HasOne("MedicalQueueApi.Models.Display", "Display")
                        .WithMany()
                        .HasForeignKey("DisplayId");

                    b.HasOne("MedicalQueueApi.Models.TypePage", "TypePage")
                        .WithMany()
                        .HasForeignKey("TypePageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Display");

                    b.Navigation("TypePage");
                });
#pragma warning restore 612, 618
        }
    }
}
